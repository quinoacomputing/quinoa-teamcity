package Quinoa_2_Docker.patches.templates

import jetbrains.buildServer.configs.kotlin.v2017_2.*
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.script
import jetbrains.buildServer.configs.kotlin.v2017_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the template with uuid = 'e6b8a4ab-5cd9-469e-a60a-03419b103842' (id = 'Quinoa_2_Docker_Image')
accordingly and delete the patch script.
*/
changeTemplate("e6b8a4ab-5cd9-469e-a60a-03419b103842") {
    expectSteps {
        script {
            name = "Verify commit"
            id = "RUNNER_23"
            scriptContent = """git verify-commit %build.vcs.number% 2>&1 | grep "Good signature""""
        }
        script {
            name = "Build image"
            id = "RUNNER_24"
            workingDir = "%workdir%"
            scriptContent = "docker build --build-arg http_proxy=http://proxyout.lanl.gov:8080/ --build-arg https_proxy=https://proxyout.lanl.gov:8080/ --build-arg COMMIT=%build.vcs.number% --no-cache=true --rm=true -t %organization%/%repository%-build:%tag% -f %dockerfile% ."
        }
        script {
            name = "Squash image"
            id = "RUNNER_30"
            workingDir = "%workdir%"
            scriptContent = "/home/jbakosi/.local/bin/docker-squash --cleanup --tmp-dir /scratch2/jbakosi/docker-squash-%tag% -t %organization%/%repository%:%tag% %organization%/%repository%-build:%tag%"
        }
        script {
            name = "Push image"
            id = "RUNNER_32"
            workingDir = "%workdir%"
            scriptContent = "docker push %organization%/%repository%:%tag%"
        }
        script {
            name = "Delete image"
            id = "RUNNER_33"
            workingDir = "%workdir%"
            scriptContent = "docker rmi %organization%/%repository%:%tag%"
        }
        script {
            name = "Clean docker"
            id = "RUNNER_34"
            workingDir = "%workdir%"
            scriptContent = """
                docker rmi -f ${'$'}(docker images -q --filter "dangling=true") || true
                                docker rmi -f ${'$'}(docker images | grep "<none>" | awk "{print \${'$'}3}") || true
                                docker rm `docker ps -a | grep Exited | awk '{print ${'$'}1 }'` || true
            """.trimIndent()
        }
    }
    steps {
        items.removeAt(5)
    }
}
